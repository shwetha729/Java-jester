"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stickers_1 = require("./stickers");
const class_transformer_1 = require("class-transformer");
const lodash_1 = require("lodash");
class StickerBuilder {
    constructor() {
        this.stickers = [];
    }
    add(sticker) {
        this.stickers.push(sticker);
        return this;
    }
    build() {
        const map = new Map();
        for (const sticker of this.stickers) {
            if (map.has(sticker.key)) {
                map.get(sticker.key).push(sticker);
            }
            else {
                map.set(sticker.key, [sticker]);
            }
        }
        const result = {};
        const ids = [];
        for (const stickers of map.values()) {
            Object.defineProperty(result, stickers[0].key, { value: JSON.stringify(stickers), enumerable: true });
            ids.push(stickers[0].id);
        }
        return Object.assign(Object.assign({}, result), { story_sticker_ids: ids.join(',') });
    }
    static hashtag(options) {
        return class_transformer_1.plainToClass(stickers_1.HashtagSticker, options);
    }
    static mention(options) {
        return class_transformer_1.plainToClass(stickers_1.MentionSticker, options);
    }
    static location(options) {
        return class_transformer_1.plainToClass(stickers_1.LocationSticker, options);
    }
    static countdown(options) {
        options.endTs = Math.floor(options.endTs.toUTC().toSeconds());
        return class_transformer_1.plainToClass(stickers_1.CountdownSticker, options);
    }
    static chat(options) {
        return class_transformer_1.plainToClass(stickers_1.ChatSticker, options);
    }
    static poll(options) {
        options.tallies = options.tallies.map(t => lodash_1.defaults(t, { fontSize: 28.0 }));
        return class_transformer_1.plainToClass(stickers_1.PollSticker, options);
    }
    static question(options) {
        return class_transformer_1.plainToClass(stickers_1.QuestionSticker, options);
    }
    static quiz(options) {
        options.options = options.options.map(o => ({ text: o, count: 0 }));
        return class_transformer_1.plainToClass(stickers_1.QuizSticker, Object.assign({ width: 0.7291667, height: 0.11824318 + options.options.length * 0.10304056 }, options));
    }
    static slider(options) {
        return class_transformer_1.plainToClass(stickers_1.SliderSticker, options);
    }
}
exports.StickerBuilder = StickerBuilder;
//# sourceMappingURL=sticker-builder.js.map